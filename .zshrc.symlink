# ==============================================================================
# File:     ~/.zshrc
# Author:   Hai Bui
# Source:   https://github.com/bvanhai/dotfiles
#
# Comment:
# ==============================================================================

# Amount of commands that need to remember in the history list
SAVEHIST=10000

# Maximum file size
HISTSIZE=10000

# Set default command history file
HISTFILE=$HOME/.histfile

# Use vi mode (-v)
bindkey -v

zstyle :compinstall filename '$HOME/.zshrc'

autoload -Uz compinit promptinit
compinit

# For autocompletion with an arrow-key driven interface:
# Press tab twice to active the menu
zstyle ':completion:*' menu select

# Use color in completion
zstyle ':completion:*:default'         list-colors ${(s.:.)LS_COLORS}

# Allow shift-tab for menu complete
bindkey '^[[Z' reverse-menu-complete

# Use $HOME/.zsh/zfunctions for autoloading functions, this must be put above
# promptinit
fpath=( "$HOME/.zsh/zfunctions" $fpath )
promptinit
# prompt adam2ltt 8bit

# Don't write duplicate entries in the history file
setopt HIST_IGNORE_DUPS

# Persistent rehash to automatically find new files in /usr/bin of new
# installed packages
setopt nohashdirs

# disable flow control
# (default was: Ctrl+s (pause transmission), Ctrl+q (resume transmission))
setopt noflowcontrol

# Map Ctrl-S to sth usefull other than XOFF (interrupt data flow).
# search functionality (same as Ctrl+R) in bash
stty -ixon


autoload -U run-help
autoload run-help-git
autoload run-help-svn
autoload run-help-svk
alias help=run-help

# ==============================================================================
# https://wiki.archlinux.org/index.php/Zsh
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}

key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
# [[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
# [[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
# alter native method includes running `autoload zkbd` then run `zkbd`, ...
# ==============================================================================

# history search based on what already entered
# Need below 2 lines to make it work in tmux. Setting in the ablove zkbd
# compatible hash doesn't work in tmux...
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward


# PROMPT
PS1=''
case ${TERM} in
  xterm*|linux*|rxvt*|tmux*|Eterm|aterm|dtterm|kterm|gnome*)
    PS1=$'%{\e[1;34m%}%n %{\e[0m%}at %{\e[0;33m%}%M %{\e[0m%}in %{\e[1;32m%}%~ %b$(git_super_status)
%{\e[1;30m%}>>> %{\e[0m%}'
    ;;
  # for emacs
  "dumb")
    PROMPT_COMMAND=
    PS1="> "
esac


# Ensure that the prompt is redrawn when the terminal size changes.
TRAPWINCH() {
  zle && { zle reset-prompt; zle -R }
}


# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward

# allow ctrl-h, ctrl-w, ctrl-? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

# The cursor color is inversed from Vim's cursor color setting
INSERT_PROMPT="teal"
COMMAND_PROMPT="gray"

# Helper for setting color including all kinds of terminals
set_prompt_color() {
    if [[ $TERM = "linux" ]]; then
        #
        # Linux Console Color Scheme: dark
        #
        # Maintainer: Jason W Ryan <http://jasonwryan.com/>
        #
        echo -en "\033]P0000000" # black
        echo -en "\033]P85e5e5e" # darkgray
        echo -en "\033]P18a2f58" # darkred
        echo -en "\033]P9cf4f88" # lightred
        echo -en "\033]P2287373" # darkgreen
        echo -en "\033]Pa53a6a6" # lightgreen
        echo -en "\033]P3914e89" # darkyellow
        echo -en "\033]Pbbf85cc" # lightyellow
        echo -en "\033]P4395573" # darkblue
        echo -en "\033]Pc4779b3" # lightblue
        echo -en "\033]P55e468c" # darkmagenta
        echo -en "\033]Pd7f62b3" # lightmagenta
        echo -en "\033]P62b7694" # darkcyan
        echo -en "\033]Pe47959e" # lightcyan
        echo -en "\033]P7899ca1" # lightgray
        echo -en "\033]Pfc0c0c0" # white
        #
    elif [[ $TMUX != '' ]]; then
        printf '\033Ptmux;\033\033]12;%b\007\033\\' "$1"
    else
        echo -ne "\033]12;$1\007"
    fi
}



# Change cursor color basing on vi mode
zle-keymap-select () {
    if [ $KEYMAP = vicmd ]; then
        set_prompt_color $COMMAND_PROMPT
    else
        set_prompt_color $INSERT_PROMPT
    fi
}

zle-line-finish() {
    set_prompt_color $INSERT_PROMPT
}

zle-line-init () {
    zle -K viins
    set_prompt_color $INSERT_PROMPT
}

zle -N zle-keymap-select
zle -N zle-line-init
zle -N zle-line-finish


# Plugins
zsh_plugins=(zsh-syntax-highlighting zsh-autosuggestions zsh-completions zsh-history-substring-search z zsh-git-prompt)
for plugin ($zsh_plugins); do
    if [ -f $HOME/.zsh/plugins/$plugin/$plugin.plugin.zsh ]; then
        . $HOME/.zsh/plugins/$plugin/$plugin.plugin.zsh
    elif [ -f $HOME/.zsh/plugins/$plugin/$plugin.zsh ]; then
        . $HOME/.zsh/plugins/$plugin/$plugin.zsh
    elif [ -f $HOME/.zsh/plugins/$plugin/*.sh ]; then
        . $HOME/.zsh/plugins/$plugin/*.sh
    fi
done

# oh-my-zsh
ohmyzsh_plugins=(archlinux dirhistory sudo tmux)
for oplugin ($ohmyzsh_plugins); do
    if [ -f $HOME/.zsh/oh-my-zsh/$oplugin/$oplugin.plugin.zsh ]; then
    . $HOME/.zsh/oh-my-zsh/$oplugin/$oplugin.plugin.zsh
    fi
done


# Load profile definitions
if [ -f $HOME/.profile ]; then
    . $HOME/.profile
fi

# Load alias definitions
if [ -f $HOME/.aliases ]; then
    . $HOME/.aliases
fi
