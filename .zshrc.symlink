# ==============================================================================
# File:     ~/.zshrc
# Author:   Hai Bui
# Source:   https://github.com/bvanhai/dotfiles
#
# Comment:  Executed by zsh
# ==============================================================================



#
# HISTORY FILE
# ________________

# Set default command history file
HISTFILE=$HOME/.history

# Maximum file size
HISTSIZE=10000

# Amount of commands that need to remember in the history list
SAVEHIST=$HISTSIZE

# Share history between all sessions
setopt SHARE_HISTORY

# Don't write duplicate entries in the history file
setopt HIST_SAVE_NO_DUPS

# Delete old recorded entry if new entry is a duplicate
setopt HIST_IGNORE_ALL_DUPS

# Remove superfluous blanks before recording entry
setopt HIST_REDUCE_BLANKS




#
# GENERAL
# ________________

# Load functions, this must be put above compinit and promptinit
zfunctions=(gentoo-zsh-completions zsh-completions zsh-prompt)
for function ($zfunctions); do
    fpath=($HOME/.zsh/functions/$function/src $fpath)
done

# Completion
zstyle :compinstall filename '$HOME/.zshrc'
autoload -Uz compinit promptinit
compinit
promptinit

# Use cache for the completions
zstyle ':completion::complete:*' use-cache 1

# Use color in completion
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# For autocompletion with an arrow-key driven interface.
# Press tab twice to active the menu
zstyle ':completion:*' menu select

# Shell functions
setenv() { typeset -x '${1}${1:+=}${(@)argv[2,$#]}' }  # csh compatibility
freload() { while (( $# )); do; unfunction $1; autoload -U $1; shift; done }

# Persistent rehash to automatically find new files in /usr/bin
zstyle ':completion:*' rehash true

# Disable flow control (Ctrl+s and Ctrl+q)
setopt noflowcontrol

# Search functionality (same as Ctrl+r) in bash
stty -ixon

# Help
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz run-help-svn
autoload -Uz run-help-svk

# Avoid tedious typing of cd command while changing current directory
setopt autocd

# Auto correction of the commands typed
#setopt correctall

# Automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath



#
# KEY BINDINGS
# ________________

# Run cat then press keys to see the codes your shortcut send.
# Press Ctrl+C to kill the cat when you're done

# Use vi mode
bindkey -v

# ==============================================================================
# Create a zkbd compatible hash
typeset -A key

key[Home]="$terminfo[khome]"
key[End]="$terminfo[kend]"
key[Insert]="$terminfo[kich1]"
key[Backspace]="$terminfo[kbs]"
key[Delete]="$terminfo[kdch1]"
key[Up]="$terminfo[kcuu1]"
key[Down]="$terminfo[kcud1]"
key[Left]="$terminfo[kcub1]"
key[Right]="$terminfo[kcuf1]"
key[PageUp]="$terminfo[kpp]"
key[PageDown]="$terminfo[knp]"

# Setup key accordingly
[[ -n "$key[Home]"      ]] && bindkey -- "$key[Home]"      beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -- "$key[End]"       end-of-line
[[ -n "$key[Insert]"    ]] && bindkey -- "$key[Insert]"    overwrite-mode
[[ -n "$key[Backspace]" ]] && bindkey -- "$key[Backspace]" backward-delete-char
[[ -n "$key[Delete]"    ]] && bindkey -- "$key[Delete]"    delete-char
[[ -n "$key[Up]"        ]] && bindkey -- "$key[Up]"        up-line-or-history
[[ -n "$key[Down]"      ]] && bindkey -- "$key[Down]"      down-line-or-history
[[ -n "$key[Left]"      ]] && bindkey -- "$key[Left]"      backward-char
[[ -n "$key[Right]"     ]] && bindkey -- "$key[Right]"     forward-char

# Finally, make sure the terminal is in application mode, when zle is active.
# Only then are the values from $terminfo valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
# ==============================================================================

# Allow shift-tab for menu complete
bindkey '^[[Z' reverse-menu-complete

# Allow Up, Down for history search based on what already entered
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

# Allow Ctrl+h, Ctrl+w, Ctrl+? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

# Allow alt-q, alt-p for zaw-history, zaw-process
bindkey '^[q' zaw-history
bindkey '^[p' zaw-process



#
# PROMPT AND COLOR
# ________________

# Prompt with git status
PS1=$'%{\e[1;34m%}%n %{\e[0m%}at %{\e[0;33m%}%M %{\e[0m%}in %{\e[1;32m%}%~ %b$(git_super_status) $prompt_newline%{\e[1;30m%}>>> %{\e[0m%}'

# Ensure that the prompt is redrawn when the terminal size changes
TRAPWINCH() {
    zle && { zle reset-prompt; zle -R }
}

# The cursor color is inversed from Vim's cursor color setting
INSERT_PROMPT=teal
COMMAND_PROMPT=gray

# Helper for setting color including all kinds of terminals
set_prompt_color() {
    if [[ $TERM = "linux" ]]; then
        # nothing
    elif [[ $TMUX != '' ]]; then
        printf '\033Ptmux;\033\033]12;%b\007\033\\' "$1"
    else
        echo -ne '\033]12;$1\007'
    fi
}

# Change cursor color basing on vi mode
zle-keymap-select () {
    if [ $KEYMAP = vicmd ]; then
        set_prompt_color $COMMAND_PROMPT
    else
        set_prompt_color $INSERT_PROMPT
    fi
}

zle-line-finish() {
    set_prompt_color $INSERT_PROMPT
}

zle-line-init () {
    zle -K viins
    set_prompt_color $INSERT_PROMPT
}

zle -N zle-keymap-select
zle -N zle-line-finish
zle -N zle-line-init



#
# EXTENDED
#

# Load plugins
# Note: zsh-syntax-highlighting must load before zsh-history-substring-search
plugins=(archlinux dirhistory sudo tmux z zaw zsh-autosuggestions zsh-git-prompt zsh-syntax-highlighting zsh-history-substring-search)
for plugin ($plugins); do
    if [ -f $HOME/.zsh/plugins/$plugin/$plugin.plugin.zsh ]; then
        . $HOME/.zsh/plugins/$plugin/$plugin.plugin.zsh
    elif [ -f $HOME/.zsh/plugins/$plugin/$plugin.zsh ]; then
        . $HOME/.zsh/plugins/$plugin/$plugin.zsh
    elif [ -f $HOME/.zsh/plugins/$plugin/$plugin.sh ]; then
        . $HOME/.zsh/plugins/$plugin/$plugin.sh
    elif [ -f $HOME/.zsh/plugins/$plugin/*.sh ]; then
        . $HOME/.zsh/plugins/$plugin/*.sh
    fi
done

# Load profile
if [ -f $HOME/.profile ]; then
    . $HOME/.profile
fi

# Load aliase
if [ -f $HOME/.aliases ]; then
    . $HOME/.aliases
fi
